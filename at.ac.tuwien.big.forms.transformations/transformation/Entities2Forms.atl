-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT : Forms from IN : Forms;

helper def : welcomeFormSet : Boolean = false;
helper def : welcomeFormHelper : Boolean = false;

rule EntityModel2FormModel {
	from
		em : Forms!EntityModel
	to 
		fm : Forms!FormModel (
			forms <- em.entityModelElements -> select(element | element->oclIsTypeOf(Forms!Entity))
		)
}

rule Entity2Form {
	from 
		e : Forms!Entity
	to 
		f : Forms!Form (
			name <- e.name,
			title <- e.name,
			pages <- e.features -> select(element | element->oclIsTypeOf(Forms!Relationship))
			)
	do {
		-- set cross reference
		f.entity <- e;
		-- add details page
		f.pages <- f.pages.append(thisModule.newDetailPage(e));
		
		-- set welcomeform
		-- has a welcomeform been set yet? if not then ...
		if (not thisModule.welcomeFormSet) {
			for (r in Forms!Relationship.allInstances()) {
				-- are there relationships pointing to the current entity?
				if (r.target = e) {
					thisModule.welcomeFormHelper <- true;
				}
			}
			-- if there have been relationsships pointing to the current entity, reset helper
			if (thisModule.welcomeFormHelper = true) {
				thisModule.welcomeFormHelper <- false;
			-- else set welcomeFormSet to true and set f.welcomeForm to true
			} else {
				f.welcomeForm <- true;
				thisModule.welcomeFormSet <- true;
			}
		}
		
	}
}

rule newDetailPage(e: Forms!Entity) {
	to
		p: Forms!Page (
			title <- e.name,
			pageElements <-  e.features -> select(element | element->oclIsTypeOf(Forms!Attribute))
			)
	do {
		p;
	}
}



abstract rule Feature2PageElement {
	from
	-- somehow map the AttributePageElement with it's Attribute
		a: Forms!Feature
	to
		t: Forms!PageElement (
			label <- a.name.toUpper().substring(1, 1) + a.name.substring(2, a.name -> size()),
			-- change this
			elementID <- a.name
		)
}

--rule Attribute2Attribute {
--	from
--		x: Forms!Attribute (x.eContainer().oclIsKindOf(Forms!AttributePageElement))
--	to
--		y: Forms!Attribute (
--			ref <- thisModule.resolveTemp(x, 't')
--		)
--}

rule Date2DateSelectionField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Date')
	to
		t: Forms!DateSelectionField	
}

rule Time2TimeSelectionField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Time')
	to
		t: Forms!TimeSelectionField
}

rule Text2TextArea extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Text')
	to
		t: Forms!TextArea
}

rule Boolean2SelectionField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Boolean')
	to
		t: Forms!SelectionField
}

rule None2SelectionField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'None')
	to
		t: Forms!SelectionField
}

rule String2TextField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'String')
	to
		t: Forms!TextField
}

rule Integer2TextField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Integer')
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'
		)
}

rule Email2TextField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Email')
	to
		t: Forms!TextField (
			-- this doesn't work when actual format is given
			format <- '^[0-9]+$'
		)
}

rule Year2TextField extends Feature2PageElement {
	from
		a: Forms!Attribute (a.type.toString() = 'Year')
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'
		)
}


