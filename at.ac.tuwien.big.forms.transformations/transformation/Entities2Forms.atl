-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT: Forms from IN: Forms;

-- id
helper def : id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1; 

-- welcomeForm
helper def: noWelcomeFormYet: Boolean =
	true;
helper def: isWelcomeFormCandidate(entity: Forms!Entity) : Boolean =
if Forms!Relationship.allInstances() -> forAll(r | r.target <> entity) then
	true
else
	false
endif;

-- get entities and entities superTypes attributes
helper def : getAttributes(entity : Forms!Entity) : Sequence(Forms!Attribute) =
if entity.superType.oclIsUndefined() then 
	entity.features -> select(element | element ->oclIsTypeOf(Forms!Attribute))
else 
	entity.features -> select(element | element ->oclIsTypeOf(Forms!Attribute)) -> union(thisModule.getAttributes(entity.superType))
endif;

--				   ---
-- TRANSFORMATIONS ---
--				   ---

rule EntityModel2FormModel {
	from
		em: Forms!EntityModel
	to
		fm: Forms!FormModel (
			forms <- em.entityModelElements -> select(element | element ->
					oclIsTypeOf(Forms!Entity))
		)
}

rule Entity2Form {
	from
		e: Forms!Entity
	to
		f: Forms!Form (			
			name <- e.name,
			title <- e.name,
			pages <- p,
			pages <- f.pages.append(e.features -> select(element | element -> 
				oclIsTypeOf(Forms!Relationship)))
			
		),
		p: Forms!Page (
			title <- f.name + ' Details',
			pageElements <- thisModule.getAttributes(e)->collect(element | thisModule.Attribute2AttributePageElement(element))
		)
	do {
	    -- set cross reference
		f.entity <- e;
		  
		-- set welcomeform
		if (thisModule.noWelcomeFormYet) {
			if (thisModule.isWelcomeFormCandidate(e)) {
				thisModule.noWelcomeFormYet <- false;
				f.welcomeForm <- true;
			}
		}
	}
}


lazy abstract rule Attribute2AttributePageElement {
	from
		a: Forms!Attribute
	to
		t: Forms!AttributePageElement (
			label <- a.name.toUpper().substring(1, 1) + a.name.substring(2, a.name ->
					size()),
			elementID <- thisModule.id.toString()
		)
}

lazy rule Date2DateSelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Date
		)
	to
		t: Forms!DateSelectionField	
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule Time2TimeSelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Time
		)
	to
		t: Forms!TimeSelectionField
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule Text2TextArea extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Text
		)
	to
		t: Forms!TextArea
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule Boolean2SelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #"Boolean"
		)
	to
		t: Forms!SelectionField
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}	
}

lazy rule None2SelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #None
		)
	to
		t: Forms!SelectionField
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule String2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #"String"
		)
	to
		t: Forms!TextField
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule Integer2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #"Integer"
		)
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'
		)
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule Email2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Email
		)
	to
		t: Forms!TextField (
			format <- '^\\w+@[a-zA-Z_]+\\.[a-zA-Z]{2,3}$'
		)
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

lazy rule Year2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Year
		)
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'

		)
	do {
		t.attribute <- a;
		thisModule.id <- thisModule.id.inc();
	}
}

rule Relationship2Page{
	from
		r: Forms!Relationship
	to
		p: Forms!Page (
			title <- r.name.toUpper().substring(1, 1) + r.name.substring(2, r.name -> size()),
			pageElements <- l
		),
		l: Forms!List (
			editingForm <- r.target,
			label <- r.target.name,
			elementID <- thisModule.id.toString()
		)
	do {
		l.relationship <- r;
		thisModule.id <- thisModule.id.inc();
	}
		
}

