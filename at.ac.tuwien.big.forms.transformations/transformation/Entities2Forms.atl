-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore


module Entities2Forms;
create OUT: Forms from IN: Forms;

helper def: welcomeFormSet: Boolean =
	false;

helper def: welcomeFormHelper: Boolean =
	false;

helper def: elementIdHelper: Integer =
	0;

helper def : getAttributes(entity : Forms!Entity) : Sequence(Forms!Attribute) =
if entity.superType.oclIsUndefined() 
then entity.features -> select(element | element ->oclIsTypeOf(Forms!Attribute))
else entity.features -> select(element | element ->oclIsTypeOf(Forms!Attribute)) -> union(entity.superType.features -> select(element | element ->oclIsTypeOf(Forms!Attribute))) endif;

rule EntityModel2FormModel {
	from
		em: Forms!EntityModel
	to
		fm: Forms!FormModel (
			forms <- em.entityModelElements -> select(element | element ->
					oclIsTypeOf(Forms!Entity))
		)
}

rule Entity2Form {
	from
		e: Forms!Entity
	to
		f: Forms!Form (			
			name <- e.name,
			title <- e.name,
			pages <- e.features -> select(element | element -> 
				oclIsTypeOf(Forms!Relationship)),
			pages <- f.pages.append(p)
		),
		p: Forms!Page (
			title <- f.name + ' Details',
			pageElements <- thisModule.getAttributes(e)->collect(elment | thisModule.Attribute2AttributePageElement(elment))
		)
	do {
	    -- set cross reference
		f.entity <- e;
		  
		-- set welcomeform
		-- has a welcomeform been set yet? if not then ...
		if (not thisModule.welcomeFormSet) {
			for (r in Forms!Relationship.allInstances()) {
				-- are there relationships pointing to the current entity?
				if (r.target = e) {
					thisModule.welcomeFormHelper <- true;
				}
			} -- if there have been relationsships pointing to the current entity, reset
					-- helper
			  if (thisModule.welcomeFormHelper = true) {
				thisModule.welcomeFormHelper <- false;
			-- else set welcomeFormSet to true and set f.welcomeForm to true
			} else {
				f.welcomeForm <- true;
				thisModule.welcomeFormSet <- true;
			}
		}
	}
}


lazy abstract rule Attribute2AttributePageElement {
--abstract rule Attribute2AttributePageElement {
	from
		a: Forms!Attribute
	to
		t: Forms!AttributePageElement (
			label <- a.name.toUpper().substring(1, 1) + a.name.substring(2, a.name ->
					size()),
			elementID <- thisModule.elementIdHelper.toString()
		)
}

lazy rule Date2DateSelectionField extends Attribute2AttributePageElement {
--rule Date2DateSelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Date
		)
	to
		t: Forms!DateSelectionField	
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule Time2TimeSelectionField extends Attribute2AttributePageElement {
--rule Time2TimeSelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Time
		)
	to
		t: Forms!TimeSelectionField
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule Text2TextArea extends Attribute2AttributePageElement {
--rule Text2TextArea extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Text
		)
	to
		t: Forms!TextArea
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule Boolean2SelectionField extends Attribute2AttributePageElement {
--rule Boolean2SelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #"Boolean"
		)
	to
		t: Forms!SelectionField
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}	
}

lazy rule None2SelectionField extends Attribute2AttributePageElement {
--rule None2SelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #None
		)
	to
		t: Forms!SelectionField
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule String2TextField extends Attribute2AttributePageElement {
--rule String2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #"String"
		)
	to
		t: Forms!TextField
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule Integer2TextField extends Attribute2AttributePageElement {
--rule Integer2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #"Integer"
		)
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'
		)
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule Email2TextField extends Attribute2AttributePageElement {
--rule Email2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Email
		)
	to
		t: Forms!TextField (
			format <- '^\\w+@[a-zA-Z_]+\\.[a-zA-Z]{2,3}$'
		)
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

lazy rule Year2TextField extends Attribute2AttributePageElement {
--rule Year2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type = #Year
		)
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'

		)
	do {
		t.attribute <- a;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Relationship2Page{
	from
		r: Forms!Relationship
	to
		p: Forms!Page (
			title <- r.name.toUpper().substring(1, 1) + r.name.substring(2, r.name -> size()),
			pageElements <- l
		),
		l: Forms!List (
			editingForm <- r.target,
			label <- r.target.name,
			elementID <- thisModule.elementIdHelper.toString()
		)
	do {
		l.relationship <- r;
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
		
}

