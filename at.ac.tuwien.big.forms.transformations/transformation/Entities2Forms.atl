-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore


module Entities2Forms;
create OUT: Forms from IN: Forms;

helper def: welcomeFormSet: Boolean =
	false;

helper def: welcomeFormHelper: Boolean =
	false;

helper def: elementIdHelper: Integer =
	0;

rule EntityModel2FormModel {
	from
		em: Forms!EntityModel
	to
		fm: Forms!FormModel (
			forms <- em.entityModelElements -> select(element | element ->
					oclIsTypeOf(Forms!Entity))
		)
}

rule Entity2Form {
	from
		e: Forms!Entity
	to
		f: Forms!Form (
			name <- e.name,
			title <- e.name
		)
	do {
		  -- set cross reference
		f.entity <- e;
		  -- add details page
		f.pages <- f.pages.append(thisModule.newDetailPage(e));
		  -- add relationship page
		
		for(r in e.features -> select(element | element ->
					oclIsTypeOf(Forms!Relationship))) 
		{
			f.pages <- f.pages.append(thisModule.newRelationShipPage(r));
		}
		
		-- set welcomeform
		-- has a welcomeform been set yet? if not then ...
		if (not thisModule.welcomeFormSet) {
			for (r in Forms!Relationship.allInstances()) {
				-- are there relationships pointing to the current entity?
				if (r.target = e) {
					thisModule.welcomeFormHelper <- true;
				}
			} -- if there have been relationsships pointing to the current entity, reset
					-- helper
			  if (thisModule.welcomeFormHelper = true) {
				thisModule.welcomeFormHelper <- false;
			-- else set welcomeFormSet to true and set f.welcomeForm to true
			} else {
				f.welcomeForm <- true;
				thisModule.welcomeFormSet <- true;
			}
		}
		
	}
}

rule newDetailPage(e: Forms!Entity) {
	to
		p: Forms!Page (
			title <- e.name + ' Details',
			pageElements <- e.features -> select(element | element ->
					oclIsTypeOf(Forms!Attribute))
		)
	do {
		p; 
	}
}

rule newRelationShipPage(r: Forms!Relationship) {
	to
		p: Forms!Page (
			title <- r.name.toUpper().substring(1, 1) + r.name.substring(2, r.name ->
					size()),
			pageElements <- r
		)
	do {
		p;
	}
}

abstract rule Feature2PageElement {
	from
		-- somehow map the AttributePageElement with it's Attribute
		a: Forms!Feature
	to
		t: Forms!PageElement (
			label <- a.name.toUpper().substring(1, 1) + a.name.substring(2, a.name ->
					size())
		)
}

abstract rule Attribute2AttributePageElement extends Feature2PageElement {
	from
		a: Forms!Attribute
	to
		t: Forms!AttributePageElement (
		)
}

rule Date2DateSelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Date'
		)
	to
		t: Forms!DateSelectionField	
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Time2TimeSelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Time'
		)
	to
		t: Forms!TimeSelectionField
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Text2TextArea extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Text'
		)
	to
		t: Forms!TextArea
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Boolean2SelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Boolean'
		)
	to
		t: Forms!SelectionField
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}	
}

rule None2SelectionField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'None'
		)
	to
		t: Forms!SelectionField
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule String2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'String'
		)
	to
		t: Forms!TextField
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Integer2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Integer'
		)
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'
		)
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Email2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Email'
		)
	to
		t: Forms!TextField (
			-- this doesn't work when actual format is given
			format <- '^[0-9]+$'
		)
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule Year2TextField extends Attribute2AttributePageElement {
	from
		a: Forms!Attribute (
			a.type.toString() = 'Year'
		)
	to
		t: Forms!TextField (
			format <- '^[0-9]+$'
		)
	do {
		t.attribute <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
}

rule test{
	from
		a: Forms!Relationship
	to
		t: Forms!List (
			editingForm <- a.target,
			label <- a.target.name
		)
	do {
		t.relationship <- a;
		t.elementID <- thisModule.elementIdHelper.toString();
		thisModule.elementIdHelper <- thisModule.elementIdHelper + 1;
	}
		
}
